#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6-24-gf6e263 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// ev3dev.sensors.SerialSensor
	c0 [label=<<table title="ev3dev.sensors.SerialSensor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> SerialSensor </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + init() </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + close() </font></td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.SerialServiceException
	c1 [label=<<table title="ev3dev.sensors.SerialServiceException" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> SerialServiceException </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + SerialServiceException(e : Exception) </td></tr>
<tr><td align="left" balign="left"> + SerialServiceException(cause : String) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.arduino.bn055.BNO055
	c2 [label=<<table title="ev3dev.sensors.arduino.bn055.BNO055" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> BNO055 </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - input : BufferedReader </td></tr>
<tr><td align="left" balign="left"> - output : OutputStream </td></tr>
<tr><td align="left" balign="left"> - TIME_OUT : int </td></tr>
<tr><td align="left" balign="left"> - DATA_RATE : int </td></tr>
<tr><td align="left" balign="left"> ~ serialPort : SerialPort </td></tr>
<tr><td align="left" balign="left"> - listenerList : List&lt;BNO055Listener&gt; </td></tr>
<tr><td align="left" balign="left"> - USBPort : String </td></tr>
<tr><td align="left" balign="left"> - response : BNO055Response </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + BNO055(USBPort : String) </td></tr>
<tr><td align="left" balign="left"> - setPortProperty() </td></tr>
<tr><td align="left" balign="left"> + init() </td></tr>
<tr><td align="left" balign="left"> + close() </td></tr>
<tr><td align="left" balign="left"> + serialEvent(oEvent : SerialPortEvent) </td></tr>
<tr><td align="left" balign="left"> + getResponse() : BNO055Response </td></tr>
<tr><td align="left" balign="left"> + addListener(listener : BNO055Listener) </td></tr>
<tr><td align="left" balign="left"> + removeListener(listener : BNO055Listener) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.arduino.bn055.BNO055EventSensor
	c3 [label=<<table title="ev3dev.sensors.arduino.bn055.BNO055EventSensor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> BNO055EventSensor </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + addListener(listener : BNO055Listener) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + removeListener(listener : BNO055Listener) </font></td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.arduino.bn055.BNO055Listener
	c4 [label=<<table title="ev3dev.sensors.arduino.bn055.BNO055Listener" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> BNO055Listener </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + dataReceived(response : BNO055Response) </font></td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.arduino.bn055.model.Acceleration
	c5 [label=<<table title="ev3dev.sensors.arduino.bn055.model.Acceleration" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Acceleration </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - x : float </td></tr>
<tr><td align="left" balign="left"> - y : float </td></tr>
<tr><td align="left" balign="left"> - z : float </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Acceleration() </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.arduino.bn055.model.BNO055Response
	c6 [label=<<table title="ev3dev.sensors.arduino.bn055.model.BNO055Response" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> BNO055Response </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - quaternion : Quaternion </td></tr>
<tr><td align="left" balign="left"> - euler : Euler </td></tr>
<tr><td align="left" balign="left"> - acceleration : Acceleration </td></tr>
<tr><td align="left" balign="left"> - magnetometer : Magnetometer </td></tr>
<tr><td align="left" balign="left"> - gyroscope : Gyroscope </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + BNO055Response() </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.arduino.bn055.model.Euler
	c7 [label=<<table title="ev3dev.sensors.arduino.bn055.model.Euler" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Euler </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - heading : float </td></tr>
<tr><td align="left" balign="left"> - roll : float </td></tr>
<tr><td align="left" balign="left"> - pitch : float </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Euler() </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.arduino.bn055.model.Gyroscope
	c8 [label=<<table title="ev3dev.sensors.arduino.bn055.model.Gyroscope" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Gyroscope </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - x : float </td></tr>
<tr><td align="left" balign="left"> - y : float </td></tr>
<tr><td align="left" balign="left"> - z : float </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Gyroscope() </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.arduino.bn055.model.Magnetometer
	c9 [label=<<table title="ev3dev.sensors.arduino.bn055.model.Magnetometer" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Magnetometer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - x : float </td></tr>
<tr><td align="left" balign="left"> - y : float </td></tr>
<tr><td align="left" balign="left"> - z : float </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Magnetometer() </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.arduino.bn055.model.Quaternion
	c10 [label=<<table title="ev3dev.sensors.arduino.bn055.model.Quaternion" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Quaternion </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - w : float </td></tr>
<tr><td align="left" balign="left"> - x : float </td></tr>
<tr><td align="left" balign="left"> - y : float </td></tr>
<tr><td align="left" balign="left"> - z : float </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Quaternion() </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.gps.GenericGPS
	c11 [label=<<table title="ev3dev.sensors.gps.GenericGPS" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GenericGPS </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - input : BufferedReader </td></tr>
<tr><td align="left" balign="left"> - output : OutputStream </td></tr>
<tr><td align="left" balign="left"> - TIME_OUT : int </td></tr>
<tr><td align="left" balign="left"> - DATA_RATE : int </td></tr>
<tr><td align="left" balign="left"> ~ serialPort : SerialPort </td></tr>
<tr><td align="left" balign="left"> - USBPort : String </td></tr>
<tr><td align="left" balign="left"> - ggaSentence : GGASentence </td></tr>
<tr><td align="left" balign="left"> - vtgSentence : VTGSentence </td></tr>
<tr><td align="left" balign="left"> - gsaSentence : GSASentence </td></tr>
<tr><td align="left" balign="left"> - rmcSentence : RMCSentence </td></tr>
<tr><td align="left" balign="left"> - gsvSentence : GSVSentence </td></tr>
<tr><td align="left" balign="left"> - date : LocalDateTime </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GenericGPS(USBPort : String) </td></tr>
<tr><td align="left" balign="left"> - setPortProperty() </td></tr>
<tr><td align="left" balign="left"> + init() </td></tr>
<tr><td align="left" balign="left"> + close() </td></tr>
<tr><td align="left" balign="left"> + serialEvent(oEvent : SerialPortEvent) </td></tr>
<tr><td align="left" balign="left"> # sentenceChooser(header : String, s : String) </td></tr>
<tr><td align="left" balign="left"> + getLatitude() : double </td></tr>
<tr><td align="left" balign="left"> + getLatitudeDirection() : char </td></tr>
<tr><td align="left" balign="left"> + getLongitude() : double </td></tr>
<tr><td align="left" balign="left"> + getLongitudeDirection() : char </td></tr>
<tr><td align="left" balign="left"> + getAltitude() : float </td></tr>
<tr><td align="left" balign="left"> + getSatellitesTracked() : int </td></tr>
<tr><td align="left" balign="left"> + getFixMode() : int </td></tr>
<tr><td align="left" balign="left"> + getTimeStamp() : int </td></tr>
<tr><td align="left" balign="left"> + getSpeed() : float </td></tr>
<tr><td align="left" balign="left"> + getCourse() : float </td></tr>
<tr><td align="left" balign="left"> + getSelectionType() : String </td></tr>
<tr><td align="left" balign="left"> + getFixType() : int </td></tr>
<tr><td align="left" balign="left"> + getPRN() : int[] </td></tr>
<tr><td align="left" balign="left"> + getPDOP() : float </td></tr>
<tr><td align="left" balign="left"> + getHDOP() : float </td></tr>
<tr><td align="left" balign="left"> + getVDOP() : float </td></tr>
<tr><td align="left" balign="left"> + getCompassDegrees() : float </td></tr>
<tr><td align="left" balign="left"> + getDate() : LocalDateTime </td></tr>
<tr><td align="left" balign="left"> - updateTime() </td></tr>
<tr><td align="left" balign="left"> - updateDate() </td></tr>
<tr><td align="left" balign="left"> + getSatellite(index : int) : Satellite </td></tr>
<tr><td align="left" balign="left"> + getSatellitesInView() : int </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.microphone.AtomicFloat
	c12 [label=<<table title="ev3dev.sensors.microphone.AtomicFloat" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> AtomicFloat </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - bits : AtomicInteger </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + AtomicFloat() </td></tr>
<tr><td align="left" balign="left"> + AtomicFloat(initialValue : float) </td></tr>
<tr><td align="left" balign="left"> + compareAndSet(expect : float, update : float) : boolean </td></tr>
<tr><td align="left" balign="left"> + set(newValue : float) </td></tr>
<tr><td align="left" balign="left"> + get() : float </td></tr>
<tr><td align="left" balign="left"> + floatValue() : float </td></tr>
<tr><td align="left" balign="left"> + getAndSet(newValue : float) : float </td></tr>
<tr><td align="left" balign="left"> + weakCompareAndSet(expect : float, update : float) : boolean </td></tr>
<tr><td align="left" balign="left"> + doubleValue() : double </td></tr>
<tr><td align="left" balign="left"> + intValue() : int </td></tr>
<tr><td align="left" balign="left"> + longValue() : long </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.microphone.Microphone
	c13 [label=<<table title="ev3dev.sensors.microphone.Microphone" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Microphone </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - soundProcessor : SoundProcessor </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Microphone() </td></tr>
<tr><td align="left" balign="left"> + init() </td></tr>
<tr><td align="left" balign="left"> + readValue() : float </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.microphone.SoundProcessor
	c14 [label=<<table title="ev3dev.sensors.microphone.SoundProcessor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> SoundProcessor </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - SAMPLE_RATE : float </td></tr>
<tr><td align="left" balign="left"> - SAMPLE_SIZE_IN_BITS : int </td></tr>
<tr><td align="left" balign="left"> - CHANNELS : int </td></tr>
<tr><td align="left" balign="left"> - SIGNED : boolean </td></tr>
<tr><td align="left" balign="left"> - BIG_ENDIAN : boolean </td></tr>
<tr><td align="left" balign="left"> - audioFormat : AudioFormat </td></tr>
<tr><td align="left" balign="left"> - line : TargetDataLine </td></tr>
<tr><td align="left" balign="left"> - bufferByteSize : int </td></tr>
<tr><td align="left" balign="left"> - buf : byte[] </td></tr>
<tr><td align="left" balign="left"> - samples : float[] </td></tr>
<tr><td align="left" balign="left"> - value : AtomicFloat </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + SoundProcessor() </td></tr>
<tr><td align="left" balign="left"> + init() </td></tr>
<tr><td align="left" balign="left"> + run() </td></tr>
<tr><td align="left" balign="left"> + getValue() : float </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.slamtec.RPLidarA1
	c15 [label=<<table title="ev3dev.sensors.slamtec.RPLidarA1" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RPLidarA1 </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - USBPort : String </td></tr>
<tr><td align="left" balign="left"> - rpLidarProvider : RPLidarProvider </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RPLidarA1(USBPort : String) </td></tr>
<tr><td align="left" balign="left"> + init() </td></tr>
<tr><td align="left" balign="left"> + scan() : Scan </td></tr>
<tr><td align="left" balign="left"> + close() </td></tr>
<tr><td align="left" balign="left"> + addListener(listener : RPLidarProviderListener) </td></tr>
<tr><td align="left" balign="left"> + removeListener(listener : RPLidarProviderListener) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.slamtec.RPLidarA1Driver
	c16 [label=<<table title="ev3dev.sensors.slamtec.RPLidarA1Driver" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RPLidarA1Driver </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - closingStatus : AtomicBoolean </td></tr>
<tr><td align="left" balign="left"> - driver : RpLidarLowLevelDriver </td></tr>
<tr><td align="left" balign="left"> - USBPort : String </td></tr>
<tr><td align="left" balign="left"> - counter : int </td></tr>
<tr><td align="left" balign="left"> - flag : boolean </td></tr>
<tr><td align="left" balign="left"> - distancesTemp : List&lt;ScanDistance&gt; </td></tr>
<tr><td align="left" balign="left"> - scan : Scan </td></tr>
<tr><td align="left" balign="left"> - listenerList : List&lt;RPLidarProviderListener&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RPLidarA1Driver(USBPort : String) </td></tr>
<tr><td align="left" balign="left"> + init() </td></tr>
<tr><td align="left" balign="left"> + scan() : Scan </td></tr>
<tr><td align="left" balign="left"> + close() </td></tr>
<tr><td align="left" balign="left"> + addListener(listener : RPLidarProviderListener) </td></tr>
<tr><td align="left" balign="left"> + removeListener(listener : RPLidarProviderListener) </td></tr>
<tr><td align="left" balign="left"> + handleMeasurement(measurement : RpLidarMeasurement) </td></tr>
<tr><td align="left" balign="left"> + containAngle(list : List&lt;ScanDistance&gt;, angle : int) : boolean </td></tr>
<tr><td align="left" balign="left"> + handleDeviceHealth(health : RpLidarHeath) </td></tr>
<tr><td align="left" balign="left"> + handleDeviceInfo(info : RpLidarDeviceInfo) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.slamtec.RPLidarA1Driver2
	c17 [label=<<table title="ev3dev.sensors.slamtec.RPLidarA1Driver2" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RPLidarA1Driver2 </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - initSuccess : boolean </td></tr>
<tr><td align="left" balign="left"> - closingStatus : AtomicBoolean </td></tr>
<tr><td align="left" balign="left"> - driver : RpLidarHighLevelDriver </td></tr>
<tr><td align="left" balign="left"> - USBPort : String </td></tr>
<tr><td align="left" balign="left"> - counter : int </td></tr>
<tr><td align="left" balign="left"> - flag : boolean </td></tr>
<tr><td align="left" balign="left"> - distancesTemp : List&lt;ScanDistance&gt; </td></tr>
<tr><td align="left" balign="left"> - scan : Scan </td></tr>
<tr><td align="left" balign="left"> - listenerList : List&lt;RPLidarProviderListener&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RPLidarA1Driver2(USBPort : String) </td></tr>
<tr><td align="left" balign="left"> + init() </td></tr>
<tr><td align="left" balign="left"> - setPortProperty() </td></tr>
<tr><td align="left" balign="left"> + scan() : Scan </td></tr>
<tr><td align="left" balign="left"> + close() </td></tr>
<tr><td align="left" balign="left"> + addListener(listener : RPLidarProviderListener) </td></tr>
<tr><td align="left" balign="left"> + removeListener(listener : RPLidarProviderListener) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.slamtec.RPLidarA1Factory
	c18 [label=<<table title="ev3dev.sensors.slamtec.RPLidarA1Factory" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RPLidarA1Factory </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RPLIDARA1_ENV_KEY : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RPLidarA1Factory() </td></tr>
<tr><td align="left" balign="left"> + getInstance(USBPort : String) : RPLidarProvider </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.slamtec.RPLidarA1Fake
	c19 [label=<<table title="ev3dev.sensors.slamtec.RPLidarA1Fake" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RPLidarA1Fake </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - readThread : RPLidarA1Fake.ReadSerialThread </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RPLidarA1Fake(USBPort : String) </td></tr>
<tr><td align="left" balign="left"> + init() </td></tr>
<tr><td align="left" balign="left"> + scan() : Scan </td></tr>
<tr><td align="left" balign="left"> + close() </td></tr>
<tr><td align="left" balign="left"> + addListener(listener : RPLidarProviderListener) </td></tr>
<tr><td align="left" balign="left"> + removeListener(listener : RPLidarProviderListener) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.slamtec.RPLidarA1Fake.ReadSerialThread
	c20 [label=<<table title="ev3dev.sensors.slamtec.RPLidarA1Fake.ReadSerialThread" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ReadSerialThread </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - run : AtomicBoolean </td></tr>
<tr><td align="left" balign="left"> - counter : AtomicInteger </td></tr>
<tr><td align="left" balign="left"> - listenerList : List&lt;RPLidarProviderListener&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ ReadSerialThread() </td></tr>
<tr><td align="left" balign="left"> + addListener(listener : RPLidarProviderListener) </td></tr>
<tr><td align="left" balign="left"> + removeListener(listener : RPLidarProviderListener) </td></tr>
<tr><td align="left" balign="left"> + requestStop() </td></tr>
<tr><td align="left" balign="left"> + run() </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.slamtec.RPLidarA1ServiceException
	c21 [label=<<table title="ev3dev.sensors.slamtec.RPLidarA1ServiceException" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RPLidarA1ServiceException </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RPLidarA1ServiceException(e : Exception) </td></tr>
<tr><td align="left" balign="left"> + RPLidarA1ServiceException(message : String) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.slamtec.RPLidarProvider
	c22 [label=<<table title="ev3dev.sensors.slamtec.RPLidarProvider" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> RPLidarProvider </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + SCAN_DEGREES : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + init() </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + scan() : Scan </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + close() </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + addListener(listener : RPLidarProviderListener) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + removeListener(listener : RPLidarProviderListener) </font></td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.slamtec.RPLidarProviderListener
	c23 [label=<<table title="ev3dev.sensors.slamtec.RPLidarProviderListener" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> RPLidarProviderListener </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + scanFinished(scan : Scan) </font></td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.slamtec.model.Scan
	c24 [label=<<table title="ev3dev.sensors.slamtec.model.Scan" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Scan </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - distances : List&lt;ScanDistance&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Scan(distances : List&lt;ScanDistance&gt;) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.slamtec.model.ScanDistance
	c25 [label=<<table title="ev3dev.sensors.slamtec.model.ScanDistance" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ScanDistance </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - angle : float </td></tr>
<tr><td align="left" balign="left"> - distance : float </td></tr>
<tr><td align="left" balign="left"> - quality : int </td></tr>
<tr><td align="left" balign="left"> - start : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ScanDistance() </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.slamtec.service.GrowQueue_I32
	c26 [label=<<table title="ev3dev.sensors.slamtec.service.GrowQueue_I32" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GrowQueue_I32 </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + data : int[] </td></tr>
<tr><td align="left" balign="left"> + size : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GrowQueue_I32(maxSize : int) </td></tr>
<tr><td align="left" balign="left"> + GrowQueue_I32() </td></tr>
<tr><td align="left" balign="left"> + reset() </td></tr>
<tr><td align="left" balign="left"> + addAll(queue : GrowQueue_I32) </td></tr>
<tr><td align="left" balign="left"> + addAll(array : int[], startIndex : int, endIndex : int) </td></tr>
<tr><td align="left" balign="left"> + add(value : int) </td></tr>
<tr><td align="left" balign="left"> + push(val : int) </td></tr>
<tr><td align="left" balign="left"> + get(index : int) : int </td></tr>
<tr><td align="left" balign="left"> + unsafe_get(index : int) : int </td></tr>
<tr><td align="left" balign="left"> + set(index : int, value : int) </td></tr>
<tr><td align="left" balign="left"> + setTo(original : GrowQueue_I32) </td></tr>
<tr><td align="left" balign="left"> + remove(index : int) </td></tr>
<tr><td align="left" balign="left"> + insert(index : int, value : int) </td></tr>
<tr><td align="left" balign="left"> + removeHead(total : int) </td></tr>
<tr><td align="left" balign="left"> + removeTail() : int </td></tr>
<tr><td align="left" balign="left"> + resize(size : int) </td></tr>
<tr><td align="left" balign="left"> + setMaxSize(size : int) </td></tr>
<tr><td align="left" balign="left"> + fill(value : int) </td></tr>
<tr><td align="left" balign="left"> + size() : int </td></tr>
<tr><td align="left" balign="left"> + pop() : int </td></tr>
<tr><td align="left" balign="left"> + indexOf(value : int) : int </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.slamtec.service.RpLidarDeviceInfo
	c27 [label=<<table title="ev3dev.sensors.slamtec.service.RpLidarDeviceInfo" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RpLidarDeviceInfo </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + model : int </td></tr>
<tr><td align="left" balign="left"> + firmware_minor : int </td></tr>
<tr><td align="left" balign="left"> + firmware_major : int </td></tr>
<tr><td align="left" balign="left"> + hardware : int </td></tr>
<tr><td align="left" balign="left"> + serialNumber : byte[] </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RpLidarDeviceInfo() </td></tr>
<tr><td align="left" balign="left"> + print() </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.slamtec.service.RpLidarHeath
	c28 [label=<<table title="ev3dev.sensors.slamtec.service.RpLidarHeath" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RpLidarHeath </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + status : int </td></tr>
<tr><td align="left" balign="left"> + error_code : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RpLidarHeath() </td></tr>
<tr><td align="left" balign="left"> + print() </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.slamtec.service.RpLidarHighLevelDriver
	c29 [label=<<table title="ev3dev.sensors.slamtec.service.RpLidarHighLevelDriver" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RpLidarHighLevelDriver </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ work : RpLidarScan </td></tr>
<tr><td align="left" balign="left"> ~ complete : RpLidarScan </td></tr>
<tr><td align="left" balign="left"> ~ ready : boolean </td></tr>
<tr><td align="left" balign="left"> ~ driver : RpLidarLowLevelDriver </td></tr>
<tr><td align="left" balign="left"> ~ expectedCount : int </td></tr>
<tr><td align="left" balign="left"> ~ initialized : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RpLidarHighLevelDriver() </td></tr>
<tr><td align="left" balign="left"> + initialize(device : String, totalCollect : int) : boolean </td></tr>
<tr><td align="left" balign="left"> - autoSetCollectionToScan() : boolean </td></tr>
<tr><td align="left" balign="left"> + stop() </td></tr>
<tr><td align="left" balign="left"> + blockCollectScan(scan : RpLidarScan, timeout : long) : boolean </td></tr>
<tr><td align="left" balign="left"> + handleMeasurement(measurement : RpLidarMeasurement) </td></tr>
<tr><td align="left" balign="left"> + handleDeviceHealth(health : RpLidarHeath) </td></tr>
<tr><td align="left" balign="left"> + handleDeviceInfo(info : RpLidarDeviceInfo) </td></tr>
<tr><td align="left" balign="left"> + isInitialized() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.slamtec.service.RpLidarListener
	c30 [label=<<table title="ev3dev.sensors.slamtec.service.RpLidarListener" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> RpLidarListener </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + handleMeasurement(measurement : RpLidarMeasurement) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + handleDeviceHealth(health : RpLidarHeath) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + handleDeviceInfo(info : RpLidarDeviceInfo) </font></td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.slamtec.service.RpLidarLowLevelDriver
	c31 [label=<<table title="ev3dev.sensors.slamtec.service.RpLidarLowLevelDriver" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RpLidarLowLevelDriver </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + SYNC_BYTE0 : byte </td></tr>
<tr><td align="left" balign="left"> + SYNC_BYTE1 : byte </td></tr>
<tr><td align="left" balign="left"> + STOP : byte </td></tr>
<tr><td align="left" balign="left"> + RESET : byte </td></tr>
<tr><td align="left" balign="left"> + SCAN : byte </td></tr>
<tr><td align="left" balign="left"> + FORCE_SCAN : byte </td></tr>
<tr><td align="left" balign="left"> + GET_INFO : byte </td></tr>
<tr><td align="left" balign="left"> + GET_HEALTH : byte </td></tr>
<tr><td align="left" balign="left"> + RCV_INFO : byte </td></tr>
<tr><td align="left" balign="left"> + RCV_HEALTH : byte </td></tr>
<tr><td align="left" balign="left"> + RCV_SCAN : byte </td></tr>
<tr><td align="left" balign="left"> - START_MOTOR : byte </td></tr>
<tr><td align="left" balign="left"> ~ serialPort : SerialPort </td></tr>
<tr><td align="left" balign="left"> ~ in : InputStream </td></tr>
<tr><td align="left" balign="left"> ~ out : OutputStream </td></tr>
<tr><td align="left" balign="left"> ~ dataOut : byte[] </td></tr>
<tr><td align="left" balign="left"> ~ verbose : boolean </td></tr>
<tr><td align="left" balign="left"> - readThread : RpLidarLowLevelDriver.ReadSerialThread </td></tr>
<tr><td align="left" balign="left"> ~ health : RpLidarHeath </td></tr>
<tr><td align="left" balign="left"> ~ deviceInfo : RpLidarDeviceInfo </td></tr>
<tr><td align="left" balign="left"> ~ measurement : RpLidarMeasurement </td></tr>
<tr><td align="left" balign="left"> ~ listener : RpLidarListener </td></tr>
<tr><td align="left" balign="left"> ~ scanning : boolean </td></tr>
<tr><td align="left" balign="left"> ~ lastReceived : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RpLidarLowLevelDriver(portName : String, listener : RpLidarListener) </td></tr>
<tr><td align="left" balign="left"> + pause(milli : long) </td></tr>
<tr><td align="left" balign="left"> + shutdown() </td></tr>
<tr><td align="left" balign="left"> + sendScan(timeout : long) : boolean </td></tr>
<tr><td align="left" balign="left"> + sendStop() </td></tr>
<tr><td align="left" balign="left"> + sendReset() </td></tr>
<tr><td align="left" balign="left"> + sendGetInfo(timeout : long) : boolean </td></tr>
<tr><td align="left" balign="left"> + sendGetHealth(timeout : long) : boolean </td></tr>
<tr><td align="left" balign="left"> # sendBlocking(command : byte, expected : byte, timeout : long) : boolean </td></tr>
<tr><td align="left" balign="left"> # sendNoPayLoad(command : byte) </td></tr>
<tr><td align="left" balign="left"> # sendPayLoad(command : byte, payLoad : byte[]) </td></tr>
<tr><td align="left" balign="left"> # sendPayLoad(command : byte, payLoadInt : int) </td></tr>
<tr><td align="left" balign="left"> + sendStartMotor(speed : int) </td></tr>
<tr><td align="left" balign="left"> + sendStopMotor() </td></tr>
<tr><td align="left" balign="left"> # parseData(data : byte[], length : int) : int </td></tr>
<tr><td align="left" balign="left"> # parsePacket(data : byte[], offset : int, length : int, type : byte) : boolean </td></tr>
<tr><td align="left" balign="left"> # parseHealth(data : byte[], offset : int, length : int) : boolean </td></tr>
<tr><td align="left" balign="left"> # parseDeviceInfo(data : byte[], offset : int, length : int) : boolean </td></tr>
<tr><td align="left" balign="left"> # parseScan(data : byte[], offset : int, length : int) : boolean </td></tr>
<tr><td align="left" balign="left"> + setVerbose(verbose : boolean) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.slamtec.service.RpLidarLowLevelDriver.ReadSerialThread
	c32 [label=<<table title="ev3dev.sensors.slamtec.service.RpLidarLowLevelDriver.ReadSerialThread" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ReadSerialThread </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ data : byte[] </td></tr>
<tr><td align="left" balign="left"> ~ size : int </td></tr>
<tr><td align="left" balign="left"> - run : AtomicBoolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ReadSerialThread() </td></tr>
<tr><td align="left" balign="left"> + requestStop() </td></tr>
<tr><td align="left" balign="left"> + run() </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.slamtec.service.RpLidarMeasurement
	c33 [label=<<table title="ev3dev.sensors.slamtec.service.RpLidarMeasurement" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RpLidarMeasurement </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + start : boolean </td></tr>
<tr><td align="left" balign="left"> + quality : int </td></tr>
<tr><td align="left" balign="left"> + angle : int </td></tr>
<tr><td align="left" balign="left"> + distance : int </td></tr>
<tr><td align="left" balign="left"> + timeMilli : long </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RpLidarMeasurement() </td></tr>
<tr><td align="left" balign="left"> + isInvalid() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.slamtec.service.RpLidarScan
	c34 [label=<<table title="ev3dev.sensors.slamtec.service.RpLidarScan" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RpLidarScan </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + N : int </td></tr>
<tr><td align="left" balign="left"> + quality : int[] </td></tr>
<tr><td align="left" balign="left"> + distance : int[] </td></tr>
<tr><td align="left" balign="left"> + time : long[] </td></tr>
<tr><td align="left" balign="left"> + used : GrowQueue_I32 </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RpLidarScan() </td></tr>
<tr><td align="left" balign="left"> + set(scan : RpLidarScan) </td></tr>
<tr><td align="left" balign="left"> + convertMeters(meters : double[]) </td></tr>
<tr><td align="left" balign="left"> + convertMilliMeters(meters : double[]) </td></tr>
<tr><td align="left" balign="left"> + reset() </td></tr>
<tr><td align="left" balign="left"> + isInvalid(which : int) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//ev3dev.sensors.SerialServiceException extends java.lang.Exception
	c35:p -> c1:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.arduino.bn055.BNO055 implements ev3dev.sensors.arduino.bn055.BNO055EventSensor
	c3:p -> c2:p [dir=back,arrowtail=empty,style=dashed];
	//ev3dev.sensors.arduino.bn055.BNO055EventSensor implements ev3dev.sensors.SerialSensor
	c0:p -> c3:p [dir=back,arrowtail=empty,style=dashed];
	//ev3dev.sensors.gps.GenericGPS implements ev3dev.sensors.SerialSensor
	c0:p -> c11:p [dir=back,arrowtail=empty,style=dashed];
	//ev3dev.sensors.microphone.AtomicFloat extends java.lang.Number
	c36:p -> c12:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.microphone.SoundProcessor extends java.lang.Thread
	c37:p -> c14:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.slamtec.RPLidarA1 implements ev3dev.sensors.slamtec.RPLidarProvider
	c22:p -> c15:p [dir=back,arrowtail=empty,style=dashed];
	//ev3dev.sensors.slamtec.RPLidarA1Driver implements ev3dev.sensors.slamtec.RPLidarProvider
	c22:p -> c16:p [dir=back,arrowtail=empty,style=dashed];
	//ev3dev.sensors.slamtec.RPLidarA1Driver implements ev3dev.sensors.slamtec.service.RpLidarListener
	c30:p -> c16:p [dir=back,arrowtail=empty,style=dashed];
	//ev3dev.sensors.slamtec.RPLidarA1Driver2 implements ev3dev.sensors.slamtec.RPLidarProvider
	c22:p -> c17:p [dir=back,arrowtail=empty,style=dashed];
	//ev3dev.sensors.slamtec.RPLidarA1Fake implements ev3dev.sensors.slamtec.RPLidarProvider
	c22:p -> c19:p [dir=back,arrowtail=empty,style=dashed];
	//ev3dev.sensors.slamtec.RPLidarA1Fake.ReadSerialThread implements java.lang.Runnable
	c38:p -> c20:p [dir=back,arrowtail=empty,style=dashed];
	//ev3dev.sensors.slamtec.RPLidarA1ServiceException extends java.lang.Exception
	c35:p -> c21:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.slamtec.service.RpLidarHighLevelDriver implements ev3dev.sensors.slamtec.service.RpLidarListener
	c30:p -> c29:p [dir=back,arrowtail=empty,style=dashed];
	//ev3dev.sensors.slamtec.service.RpLidarLowLevelDriver.ReadSerialThread implements java.lang.Runnable
	c38:p -> c32:p [dir=back,arrowtail=empty,style=dashed];
	// java.lang.Runnable
	c38 [label=<<table title="java.lang.Runnable" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/Runnable.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> Runnable </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + run() </font></td></tr>
		</table></td></tr>
		</table>>, URL="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/Runnable.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// java.lang.Thread
	c37 [label=<<table title="java.lang.Thread" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/Thread.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Thread </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - name : String </td></tr>
<tr><td align="left" balign="left"> - priority : int </td></tr>
<tr><td align="left" balign="left"> - threadQ : Thread </td></tr>
<tr><td align="left" balign="left"> - eetop : long </td></tr>
<tr><td align="left" balign="left"> - single_step : boolean </td></tr>
<tr><td align="left" balign="left"> - daemon : boolean </td></tr>
<tr><td align="left" balign="left"> - stillborn : boolean </td></tr>
<tr><td align="left" balign="left"> - target : Runnable </td></tr>
<tr><td align="left" balign="left"> - group : ThreadGroup </td></tr>
<tr><td align="left" balign="left"> - contextClassLoader : ClassLoader </td></tr>
<tr><td align="left" balign="left"> - inheritedAccessControlContext : AccessControlContext </td></tr>
<tr><td align="left" balign="left"> - threadInitNumber : int </td></tr>
<tr><td align="left" balign="left"> ~ threadLocals : ThreadLocal.ThreadLocalMap </td></tr>
<tr><td align="left" balign="left"> ~ inheritableThreadLocals : ThreadLocal.ThreadLocalMap </td></tr>
<tr><td align="left" balign="left"> - stackSize : long </td></tr>
<tr><td align="left" balign="left"> - nativeParkEventPointer : long </td></tr>
<tr><td align="left" balign="left"> - tid : long </td></tr>
<tr><td align="left" balign="left"> - threadSeqNumber : long </td></tr>
<tr><td align="left" balign="left"> - threadStatus : int </td></tr>
<tr><td align="left" balign="left"> ~ parkBlocker : Object </td></tr>
<tr><td align="left" balign="left"> - blocker : Interruptible </td></tr>
<tr><td align="left" balign="left"> - blockerLock : Object </td></tr>
<tr><td align="left" balign="left"> + MIN_PRIORITY : int </td></tr>
<tr><td align="left" balign="left"> + NORM_PRIORITY : int </td></tr>
<tr><td align="left" balign="left"> + MAX_PRIORITY : int </td></tr>
<tr><td align="left" balign="left"> - EMPTY_STACK_TRACE : StackTraceElement[] </td></tr>
<tr><td align="left" balign="left"> - SUBCLASS_IMPLEMENTATION_PERMISSION : RuntimePermission </td></tr>
<tr><td align="left" balign="left"> - uncaughtExceptionHandler : Thread.UncaughtExceptionHandler </td></tr>
<tr><td align="left" balign="left"> - defaultUncaughtExceptionHandler : Thread.UncaughtExceptionHandler </td></tr>
<tr><td align="left" balign="left"> ~ threadLocalRandomSeed : long </td></tr>
<tr><td align="left" balign="left"> ~ threadLocalRandomProbe : int </td></tr>
<tr><td align="left" balign="left"> ~ threadLocalRandomSecondarySeed : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Thread() </td></tr>
<tr><td align="left" balign="left"> + Thread(arg0 : Runnable) </td></tr>
<tr><td align="left" balign="left"> ~ Thread(arg0 : Runnable, arg1 : AccessControlContext) </td></tr>
<tr><td align="left" balign="left"> + Thread(arg0 : ThreadGroup, arg1 : Runnable) </td></tr>
<tr><td align="left" balign="left"> + Thread(arg0 : String) </td></tr>
<tr><td align="left" balign="left"> + Thread(arg0 : ThreadGroup, arg1 : String) </td></tr>
<tr><td align="left" balign="left"> + Thread(arg0 : Runnable, arg1 : String) </td></tr>
<tr><td align="left" balign="left"> + Thread(arg0 : ThreadGroup, arg1 : Runnable, arg2 : String) </td></tr>
<tr><td align="left" balign="left"> + Thread(arg0 : ThreadGroup, arg1 : Runnable, arg2 : String, arg3 : long) </td></tr>
<tr><td align="left" balign="left"> + Thread(arg0 : ThreadGroup, arg1 : Runnable, arg2 : String, arg3 : long, arg4 : boolean) </td></tr>
<tr><td align="left" balign="left"> - registerNatives() </td></tr>
<tr><td align="left" balign="left"> - nextThreadNum() : int </td></tr>
<tr><td align="left" balign="left"> - nextThreadID() : long </td></tr>
<tr><td align="left" balign="left"> ~ blockedOn(arg0 : Interruptible) </td></tr>
<tr><td align="left" balign="left"> + currentThread() : Thread </td></tr>
<tr><td align="left" balign="left"> + yield() </td></tr>
<tr><td align="left" balign="left"> + sleep(arg0 : long) </td></tr>
<tr><td align="left" balign="left"> + sleep(arg0 : long, arg1 : int) </td></tr>
<tr><td align="left" balign="left"> + onSpinWait() </td></tr>
<tr><td align="left" balign="left"> - init(arg0 : ThreadGroup, arg1 : Runnable, arg2 : String, arg3 : long) </td></tr>
<tr><td align="left" balign="left"> - init(arg0 : ThreadGroup, arg1 : Runnable, arg2 : String, arg3 : long, arg4 : AccessControlContext, arg5 : boolean) </td></tr>
<tr><td align="left" balign="left"> # clone() : Object </td></tr>
<tr><td align="left" balign="left"> + start() </td></tr>
<tr><td align="left" balign="left"> - start0() </td></tr>
<tr><td align="left" balign="left"> + run() </td></tr>
<tr><td align="left" balign="left"> - exit() </td></tr>
<tr><td align="left" balign="left"> + stop() </td></tr>
<tr><td align="left" balign="left"> + stop(arg0 : Throwable) </td></tr>
<tr><td align="left" balign="left"> + interrupt() </td></tr>
<tr><td align="left" balign="left"> + interrupted() : boolean </td></tr>
<tr><td align="left" balign="left"> + isInterrupted() : boolean </td></tr>
<tr><td align="left" balign="left"> - isInterrupted(arg0 : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + destroy() </td></tr>
<tr><td align="left" balign="left"> + isAlive() : boolean </td></tr>
<tr><td align="left" balign="left"> + suspend() </td></tr>
<tr><td align="left" balign="left"> + resume() </td></tr>
<tr><td align="left" balign="left"> + setPriority(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + getPriority() : int </td></tr>
<tr><td align="left" balign="left"> + setName(arg0 : String) </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
<tr><td align="left" balign="left"> + getThreadGroup() : ThreadGroup </td></tr>
<tr><td align="left" balign="left"> + activeCount() : int </td></tr>
<tr><td align="left" balign="left"> + enumerate(arg0 : Thread[]) : int </td></tr>
<tr><td align="left" balign="left"> + countStackFrames() : int </td></tr>
<tr><td align="left" balign="left"> + join(arg0 : long) </td></tr>
<tr><td align="left" balign="left"> + join(arg0 : long, arg1 : int) </td></tr>
<tr><td align="left" balign="left"> + join() </td></tr>
<tr><td align="left" balign="left"> + dumpStack() </td></tr>
<tr><td align="left" balign="left"> + setDaemon(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + isDaemon() : boolean </td></tr>
<tr><td align="left" balign="left"> + checkAccess() </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + getContextClassLoader() : ClassLoader </td></tr>
<tr><td align="left" balign="left"> + setContextClassLoader(arg0 : ClassLoader) </td></tr>
<tr><td align="left" balign="left"> + holdsLock(arg0 : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + getStackTrace() : StackTraceElement[] </td></tr>
<tr><td align="left" balign="left"> + getAllStackTraces() : Map&lt;Thread, StackTraceElement&gt; </td></tr>
<tr><td align="left" balign="left"> - isCCLOverridden(arg0 : Class&lt;?&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> - auditSubclass(arg0 : Class&lt;?&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> - dumpThreads(arg0 : Thread[]) : StackTraceElement[][] </td></tr>
<tr><td align="left" balign="left"> - getThreads() : Thread[] </td></tr>
<tr><td align="left" balign="left"> + getId() : long </td></tr>
<tr><td align="left" balign="left"> + getState() : Thread.State </td></tr>
<tr><td align="left" balign="left"> + setDefaultUncaughtExceptionHandler(arg0 : Thread.UncaughtExceptionHandler) </td></tr>
<tr><td align="left" balign="left"> + getDefaultUncaughtExceptionHandler() : Thread.UncaughtExceptionHandler </td></tr>
<tr><td align="left" balign="left"> + getUncaughtExceptionHandler() : Thread.UncaughtExceptionHandler </td></tr>
<tr><td align="left" balign="left"> + setUncaughtExceptionHandler(arg0 : Thread.UncaughtExceptionHandler) </td></tr>
<tr><td align="left" balign="left"> - dispatchUncaughtException(arg0 : Throwable) </td></tr>
<tr><td align="left" balign="left"> ~ processQueue(arg0 : ReferenceQueue&lt;Class&lt;?&gt;&gt;, arg1 : ConcurrentMap&lt;?, ?&gt;) </td></tr>
<tr><td align="left" balign="left"> - setPriority0(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> - stop0(arg0 : Object) </td></tr>
<tr><td align="left" balign="left"> - suspend0() </td></tr>
<tr><td align="left" balign="left"> - resume0() </td></tr>
<tr><td align="left" balign="left"> - interrupt0() </td></tr>
<tr><td align="left" balign="left"> - setNativeName(arg0 : String) </td></tr>
		</table></td></tr>
		</table>>, URL="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/Thread.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// java.lang.Number
	c36 [label=<<table title="java.lang.Number" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/Number.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Number </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - serialVersionUID : long </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Number() </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + intValue() : int </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + longValue() : long </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + floatValue() : float </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + doubleValue() : double </font></td></tr>
<tr><td align="left" balign="left"> + byteValue() : byte </td></tr>
<tr><td align="left" balign="left"> + shortValue() : short </td></tr>
		</table></td></tr>
		</table>>, URL="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/Number.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// java.lang.Exception
	c35 [label=<<table title="java.lang.Exception" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/Exception.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Exception </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ serialVersionUID : long </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Exception() </td></tr>
<tr><td align="left" balign="left"> + Exception(arg0 : String) </td></tr>
<tr><td align="left" balign="left"> + Exception(arg0 : String, arg1 : Throwable) </td></tr>
<tr><td align="left" balign="left"> + Exception(arg0 : Throwable) </td></tr>
<tr><td align="left" balign="left"> # Exception(arg0 : String, arg1 : Throwable, arg2 : boolean, arg3 : boolean) </td></tr>
		</table></td></tr>
		</table>>, URL="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/Exception.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
}

